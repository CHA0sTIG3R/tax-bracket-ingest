name: CI + CD

on: 
  push:
  pull_request:

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      AWS_REGION: us-east-1
      ECR_REPO: tax-bracket-ingest
      LAMBDA_NAME: tax-bracket-ingestor

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps & test
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pytest --cov=tax_bracket_ingest --cov-report=xml

      - uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
      
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::300536313917:role/GitHubOIDCRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repo exists
        id: ecr
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPO || \
          aws ecr create-repository --repository-name $ECR_REPO
      
      - name: Build and push Lambda image
        env:
          ECR_URI: ${{ steps.ecr.outputs.repositories.repositoryUri }}
        run: |
          GIT_SHA=${GITHUB_SHA::7}
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${ECR_URI%/*}
          docker build --platform linux/amd64 --provenance=false -f Dockerfile.lambda -t $ECR_URI:$GIT_SHA -t $ECR_URI:prod .
          docker push $ECR_URI:$GIT_SHA
          docker push $ECR_URI:prod
          echo "IMAGE_URI=$ECR_URI:prod" >> $GITHUB_ENV

      - name: Update Lambda function code
        run: |
          aws Lambda update-function-code \
            --function-name $LAMBDA_NAME \
            --image-uri $IMAGE_URI